# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#


# AnyCPU will produce x64 for NotakeyNETProvider,
# which is the only project that has a bit-dependency
# (due to the version of credentialprovider_*.dll reference)
platform: Any CPU
configuration: Debug

# version format
version: 1.0.{build}

# branches to build
branches:
  # whitelist
  only:
    #- master

# Do not build on tags (GitHub and BitBucket)
skip_tags: false

# Start builds on tags only (GitHub and BitBucket)
skip_non_tags: true


#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2015

init:
  - git config --global core.autocrlf true
install:
  - set PATH=C:\Ruby23-x64\bin;%PATH%
  - set "PATH=C:\Program Files\wkhtmltopdf\bin;%PATH%"
  # Set "build version number" to "short-commit-hash" or when tagged to "tag name" (Travis style)
  - ps: >-
      $gitCommitTag = ConvertFrom-StringData (git describe --exact-match $env:APPVEYOR_REPO_COMMIT | out-string)
      Add-AppveyorMessage -Message "Git tag for commit $gitCommitTag"

      if ($env:APPVEYOR_REPO_TAG -eq "true")
      {
        if ($env:APPVEYOR_REPO_TAG_NAME -eq $gitCommitTag)
        {
          #Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME"
          continue;
        }
        else
        {
          Add-AppveyorMessage -Message "Tag name missmatch $env:APPVEYOR_REPO_TAG_NAME and $gitCommitTag)"
          return;
        }
      }
      else
      {
        Add-AppveyorMessage -Message "Build is not initiated by git tag."
        return;
      }
      
      $globalAssemblyFile = "GlobalAssemblyInfo.cs"

      $globalAssemblyVersion = Get-Content .\$globalAssemblyFile

      $hasAssemblyVersion = "'"+$globalAssemblyVersion+"'" -match 'AssemblyVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)'

      if (!$hasAssemblyVersion)
      {
        Add-AppveyorMessage -Message "No AssemblyVersion found, using 1.0.0.0 instead."

        $major=1
        $minor=0
        $build=0
        $revision=0
      }
      else
      {
        $assemblyVersionFormattedCorrectly = $matches[0] -match "(?<major>[0-9]+)\.(?<minor>[0-9])+(\.(?<build>([0-9])))?(\.(?<revision>([0-9])))?"

        if (!$assemblyVersionFormattedCorrectly)
        {
          Add-AppveyorMessage -Message "The Global Assembly Version is not formatted correctly."
          return;
        }

        $major=$matches['major'] -as [int]
        $minor=$matches['minor'] -as [int]
        $build=$matches['build'] -as [int]
        $revision=$matches['revision'] -as [int]
      }

      $AssemblyVersion = "$major.$minor.$build.$revision"

      Add-AppveyorMessage -Message "Global Assembly Version: $AssemblyVersion ."

      #$AssemblyFileVersion = "$major.$minor.$env:APPVEYOR_BUILD_NUMBER"
      $AssemblyFileVersion = $env:APPVEYOR_REPO_TAG_NAME

      $AssemblyInformationalVersion = "$AssemblyFileVersion-$env:APPVEYOR_REPO_SCM" + ($env:APPVEYOR_REPO_COMMIT).Substring(0, 8)

      Add-AppveyorMessage -Message "Patched File Version: $AssemblyFileVersion"

      Add-AppveyorMessage -Message "Patched Informational Version: $AssemblyInformationalVersion"

      Update-AppveyorBuild -Version "$AssemblyFileVersion"

      $fileVersion = 'AssemblyFileVersion("' + $AssemblyFileVersion + '")';
      $informationalVersion = 'AssemblyInformationalVersion("' + $AssemblyInformationalVersion + '")';

      $foundFiles = get-childitem .\*AssemblyInfo.cs -recurse

      foreach( $file in $foundFiles )
      {
        if ($file.Name -eq $globalAssemblyFile)
        {
          #Don't patch the global info.
          continue;
        }

        $content = Get-Content "$file"

        Add-AppveyorMessage -Message "Patching $file"

        $env:afv = $fileVersion
        $env:aiv = $informationalVersion

        $hasFileAssemblyVersion = "'"+$content+"'" -match 'AssemblyVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)'

        if ($hasFileAssemblyVersion)
        {
          $assemblyVersionFormattedCorrectly = $matches[0] -match "(?<major>[0-9]+)\.(?<minor>[0-9])+(\.(?<build>([0-9])))?(\.(?<revision>([0-9])))?"

          if ($assemblyVersionFormattedCorrectly)
          {
            $fileMajor=$matches['major'] -as [int]
            $fileMinor=$matches['minor'] -as [int]
            $fileBuild=$matches['build'] -as [int]
            $fileRevision=$matches['revision'] -as [int]


            $env:afv = "$fileMajor.$fileMinor.$env:APPVEYOR_BUILD_NUMBER"
            $env:aiv = "$env:afv-$env:APPVEYOR_REPO_SCM" + ($env:APPVEYOR_REPO_COMMIT).Substring(0, 8)

            Add-AppveyorMessage -Message "• Specific AssemblyVersion found, using that instead: $fileMajor.$fileMinor.$fileBuild.$fileRevision ."
            Add-AppveyorMessage -Message "  ○ Patched File Version: $env:afv"
            Add-AppveyorMessage -Message "  ○ Patched Informational Version: $env:aiv"
          }
          else
          {
            Add-AppveyorMessage -Message "• Specific AssemblyVersion found, but it's not formatted correctly, skipping."
          }
        }
      }
  - cd docs
  - cd manual
  - rem bundle install
  - rem choco install wkhtmltopdf --version 0.12.4 -ia "'/D=C:\wkhtmltopdf'"
  - rem bundle exec middleman build --verbose
  - cd ..
  - cd ..
before_build:
  - nuget restore
build:
  project: NotakeyNETProvider.sln
artifacts:
  - path: 'register*.bat'
  - path: 'unregister*.bat'
  - path: '**\*.reg'
  - path: '**\*.pdf'
  - path: NotakeyNETProvider\bin\x64\$(configuration)
    name: 'NotakeyNETProvider'
  - path: NotakeyBGService\bin\$(configuration)
    name: 'NotakeyBGService'
  - path: CredUIInvokerNET\bin\$(configuration)
    name: 'CredUIInvokerNET'
assembly_info:
  patch: true
  file: '**\AssemblyInfo.*'
  assembly_version: $(afv)
  assembly_file_version: $(afv)
  assembly_informational_version: $(aiv)

